//------------------------------------------------------------------------
//	P10xx-P20xxRDB board with P2020 CPU README
//------------------------------------------------------------------------

This stationery project is designed to get you up and running
quickly with CodeWarrior for Power Architecture Development Studio.
It is set up for a particular evaluation board, but can be easily modified
to target custom hardware.  The hardware specific changes that
you may need to make include hardware initialization code, 
UART driver, flash programing code, and possibly the linker
command file for memory map issues.

The New Power Architecture Project wizard can create 2 projects, one for each 
core of P2020. The first core's project (core 0) is responsible for initializing 
the board. The project for the other core only initializes core specific
options, not the whole platform. Therefore launching the project for the second
core requires that the core 0's project is running.

Each project has three targets: 
 - Debug Version
 - ROM Version (only for core #0)
 - Cache ISR Debug Version


Each project has three targets: 
 - Debug Version
 - ROM Version (only for core #0)
 - Cache ISR Debug Version


Both executables will print "Welcome to CodeWarrior!" out of the common 
serial port (DUART1). To view the output, connect a null-modem serial cable from 
the serial port to your computer. Open a terminal program and set it up to match 
these settings:

Baud Rate: 115200
Data Bits: 8
Parity: None
Stop Bits: 1
Flow Control: None

NOTE!
* The UART libraries are compiled with a specific CCSRBAR address. For different values of the CCSRBAR
you need to rebuild your library:
1) Import the corresponding serial library project from your CW install directory
<CWInstallDir>\PA\PA_Support\Serial\P10xx-P20xxRDB_serial\.project
2) Open duart_config.h file and change the value of the "MMR_BASE" accordingly
3) Switch to the corresponding build target and re-build the project Project > Build Project or Build All (Ctrl+B)

* If you want to redirect output to a debugger console instead of UART driver, 
please follow above instruction to remove P10xx-P20xxRDB from the project and instead use the ‘syscall.a’ 
library from <CWInstallDir>\PA\PA_Support\SystemCallSupport\Lib\syscall.a or the project Lib Folder.
Also please make sure you "Activate Support for System Services" in the "System Call Services" sub-tab
from the "Debugger" tab in the corresponding debug launch configuration. 
Also please make sure you have the correct library listed in the "Other objects" panel in the project's
Properties > C/C++ Build > Settings > Power PC Linker > Input.

* The default baud rate is set at ‘115200’. For changing the baud rate, update PA\PA_Support\ewl\EWL_C\include\pa\uart_console_config.h  
to an appropriate value in the application code and rebuild the runtime library.

*Since reading of "Write-only" SEC KEUKDn registers causes setting of the error flags
in KEUSR and KEUISR registers it is recomended to use "SEC_KEU.mem" as memory 
configuration file. You will see the value of these registers
as 0x21212121 in the register window.


From the project menu, select Build All (Ctrl+B) and then launch the appropriate Debug Configuration.
The debugger should come up at main().  Step past the printf statement and
you should see the output on your terminal.



Memory map and initialization
-----------------------------
0x00000000  0x3FFFFFFF 	DDR	                1GB
0x80000000  0x9FFFFFFF  PEX2           		512MB
0xA0000000  0xBFFFFFFF  PEX1                512MB
0xE0000000	0xE00FFFFF	CCSRBAR Space	    1M
0xEFA00000  0xEFAFFFFF  LocalBus NAND FLASH 1M
0xEFC00000  0xEFCFFFFF  PEX I/O 			256k
0xFF000000	0xFFFFFFFF  LocalBus NOR FLASH	16M	


Burning ROM Version to NOR flash
--------------------------------
CodeWarrior provides a cheat-sheet that will guide you through the steps 
needed to program the flash. You can access the cheat-sheet from Eclipse:
 Help->Cheat Sheets->Using Flash Programmer.
Import the settings from Flash_Programmer\QorIQ_P2\P10xx-P20xxRDB_P2020_NOR_FLASH.xml.
Please refer to the cheat-sheet or the CW documentation for instructions on how
to program/verify the ROM image (ROM.mot) generated by the stationery 
project. Please make sure the flash memory is blank before programming. You can do 
this by using the Blank Check feature. The ROM image is located in the last sectors 
of the flash memory to include the CPU's reset address.

-----------------------------------------------------------------------------------------
Switch settings for Rev. B - CPU:1200 MHz, CCB:600 MHz, DDR:666 MHz, SYSCLK: 50 MHz
-----------------------------------------------------------------------------------------
 
 SW4: Off Off Off On  Off On  Off Off
 SW5: Off On  On  On  On  Off On  On

-----------------------------------------------------------------------------------------
Switch settings for Rev. A - CPU:1200 MHz, CCB:400 MHz, DDR:533 MHz, SYSCLK: 66 MHz
-----------------------------------------------------------------------------------------
 
 SW = 0011

 
Where '1' = up/ON

//------------------------------------------------------------------------
//	Getting Started
//------------------------------------------------------------------------

Most of the target settings are already configured for you if you are
using the evaluation board with the stationery.  From the Edit menu,
select {Target Name} Settings... (Alt+F7). Select the Remote Debugging
pref panel from left column.  Make sure that the correct remote connection
is selected.  
We recommend that you make sure the project is working properly with the 
board before you begin adding your own code. Select Debug from the Project 
menu. If everything is working properly, the debugger window should come up 
for both projects and be stopped at main().

The Debug Version target simply runs incrementing a counter in an infinite loop.

-----------------------------------------------------------------------------
TLB Registers Details
-----------------------------------------------------------------------------
 
TLB1 Registers : L2MMU_CAM0- L2MMU_CAM15 (e500v2)
-------------------------------------------------
0:  3 - SIZE = Encoded page size
	0001 -> 4 Kbyte page size;
	0010 -> 16 Kbyte page size;
	0011 -> 64 Kbyte page size;
	0100 -> 256 Kbyte page size;
	0101 -> 1 Mbyte page size;
	0110 -> 4 Mbyte page size;
	0111 -> 16 Mbyte page size;
	1000 -> 64 Mbyte page size;
	1001 -> 256 Mbyte page size
	1010 -> 1 Gbyte page size		// ONLY FOR e500v2
	1011 -> 4 Gbyte page size		// ONLY FOR e500v2

4 - TS = Translation address space (compared with AS bit of the current access)
5:  7 - reserved
8: 15 - TID = Translation ID (compared with PID0, PID1, PID2 or TIDZ (all zeros)
16: 25 - MASK = Mask
	SIZE		MASK
	4KB		0x0000000000
	16KB	0x0000000001
	64KB	0x0000000011
	256KB	0x0000000111
	1MB		0x0000001111
	4MB		0x0000011111
	16MB	0x0000111111
	64MB	0x0001111111
	256MB	0x0011111111
	1G		0x0111111111
	4G		0x1111111111
26 - reserved
27: 31 - WIMGE = Memory/cache attributes (write-through, cache-inhibit, memory coherence required, guarded, endian)
32 - UR = User  read permission bit
33 - UW = User  write permission bit
34 - UX = User  execute permission bit 
35 - SR = Supervisor read permission bit
36 - SW = Supervisor write permission bit
37 - SX = Supervisor execute permission bit
38 - X0 = Extra system attribute bits (for definition by system software) 
39 - X1 = Extra system attribute bits (for definition by system software)
40: 43 - U0-U3 = User attribute bits: used only by software. These bits exist in the L2 MMU TLBs only (TLB1 and TLB0)
44 - IPROT = Invalidation protection (exists in TLB1 only)
45: 59 - reserved
60: 83 - RPN = Real page number (translated address RA[28..50] for 4 Kbyte pages)
84: 95 - reserved
96:115 - EPN = Effective page number (compared with EA[31..50] for 4 Kbyte pages)
116:126 - reserved
128 - V = Valid bit for entry

//------------------------------------------------------------------------
//	Adding your own code
//------------------------------------------------------------------------

Once everything is working as expected, you can begin adding your own code
to the project.  Keep in mind that we provide this as an example of how to
get up and running quickly with CodeWarrior.  There are certainly other 
ways to set up your linker command file or handle interrupts.  Feel free
to modify any of the source provided. 

//------------------------------------------------------------------------
//	Contacting Freescale
//------------------------------------------------------------------------
You can contact us via email, newsgroups, voice, fax or the 
CodeWarrior website.  For details on contacting Freescale, visit 
http://www.freescale.com/codewarrior, or refer to the front of any 
CodeWarrior manual.

For questions, bug reports, and suggestions, please use the email 
report forms in the Release Notes folder.

For the latest news, offers, and updates for CodeWarrior, browse
Freescale Worldwide.

<http://www.freescale.com>


